#include "asim/provides/hasim_common.h"
#include "asim/provides/funcp_base_types.h"
#include "asim/provides/funcp_memory.h"

// Temporary hack until RRR has a type system
#define FUNCP_ISA_P_ADDR_SIZE_RRR 64

service FUNCP_MEMORY
{
    server hw (bsv, connection) <- sw (cpp, method)
    {
        //
        // Software ACK that pipelined store is complete.
        //
        method StoreACK(in UINT8[8] ack);

        //
        // Request from host to invalidate a line cached in hardware.
        //
        method Invalidate(in FUNCP_PADDR_RRR[FUNCP_ISA_P_ADDR_SIZE_RRR] addr,
                          in UINT8[8] onlyFlush,
                          out UINT8[8] ack);
    };

    server sw (cpp, method) <- hw (bsv, connection)
    {
        // Load a single word.
        method Load (in FUNCP_PADDR_RRR[FUNCP_ISA_P_ADDR_SIZE_RRR] addr,
                     in UINT8[8] isSpeculative,
                     out MEM_VALUE[FUNCP_ISA_INT_REG_SIZE] data,
                     out UINT8[8] isCacheable);

        //
        // Load Line --
        //     Assumes 4 words per line until RRR types are more genreal.
        //
        method LoadLine (in FUNCP_PADDR_RRR[FUNCP_ISA_P_ADDR_SIZE_RRR] addr,
                         in UINT8[8] isSpeculative,
                         out MEM_VALUE[FUNCP_ISA_INT_REG_SIZE] data0,
                         out MEM_VALUE[FUNCP_ISA_INT_REG_SIZE] data1,
                         out MEM_VALUE[FUNCP_ISA_INT_REG_SIZE] data2,
                         out MEM_VALUE[FUNCP_ISA_INT_REG_SIZE] data3,
                         out UINT8[8] isCacheable);


        // Store a single word
        method Store(in FUNCP_PADDR_RRR[FUNCP_ISA_P_ADDR_SIZE_RRR] addr,
                     in MEM_VALUE[FUNCP_ISA_INT_REG_SIZE] data);

        //
        // Store Line -- 
        //     Store a line of data.  The current implementation assumes
        //     4 words per line.  When RRR gets a more general type representation
        //     the data description can be generalized.
        //
        //     When sendAck is set, the host sends on ACK to StoreACK in the
        //     hardware server.
        //
        method StoreLine(in UINT8[8] wordValid,
                         in UINT8[8] sendAck,
                         in FUNCP_PADDR_RRR[FUNCP_ISA_P_ADDR_SIZE_RRR] addr,
                         in MEM_VALUE[FUNCP_ISA_INT_REG_SIZE] data0,
                         in MEM_VALUE[FUNCP_ISA_INT_REG_SIZE] data1,
                         in MEM_VALUE[FUNCP_ISA_INT_REG_SIZE] data2,
                         in MEM_VALUE[FUNCP_ISA_INT_REG_SIZE] data3);
    };
};
