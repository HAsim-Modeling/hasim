#include "asim/provides/hasim_common.h"
#include "asim/provides/funcp_base_types.h"
#include "asim/provides/funcp_memory.h"

service FUNCP_MEMORY
{
    server hw (bsv, connection) <- sw (cpp, method)
    {
        method Invalidate(in CONTEXT_ID_RRR[CONTEXT_ID_BITS_RRR] ctxId,
                          in MEM_ADDRESS_RRR[64] addr,
                          in UINT8[8] nLines,
                          in UINT8[8] onlyFlush,
                          out UINT32[32] ack);
    };

    server sw (cpp, method) <- hw (bsv, connection)
    {
        method Load (in CONTEXT_ID_RRR[CONTEXT_ID_BITS_RRR] ctxId,
                     in MEM_ADDRESS_RRR[64] addr,
                     out MEM_VALUE[FUNCP_ISA_INT_REG_SIZE] data);

        method LoadCacheLine (in CONTEXT_ID_RRR[CONTEXT_ID_BITS_RRR] ctxId,
                              in MEM_ADDRESS_RRR[64] addr,
                              out MEM_CACHELINE[FUNCP_CACHELINE_BITS] data);


        method Store(in CONTEXT_ID_RRR[CONTEXT_ID_BITS_RRR] ctxId,
                     in MEM_ADDRESS_RRR[64] addr,
                     in MEM_VALUE[FUNCP_ISA_INT_REG_SIZE] data);

        method StoreCacheLine(in CONTEXT_ID_RRR[CONTEXT_ID_BITS_RRR] ctxId,
                              in UINT8[8] wordValid,
                              in MEM_ADDRESS_RRR[64] addr,
                              in MEM_CACHELINE[FUNCP_CACHELINE_BITS] data);

        // Store cache line with ACK
        method StoreCacheLine_Sync(in CONTEXT_ID_RRR[CONTEXT_ID_BITS_RRR] ctxId,
                                   in UINT8[8] wordValid,
                                   in MEM_ADDRESS_RRR[64] addr,
                                   in MEM_CACHELINE[FUNCP_CACHELINE_BITS] data,
                                   out UINT32[32] ack);

        method VtoP(in CONTEXT_ID_RRR[CONTEXT_ID_BITS_RRR] ctxId,
                    in MEM_VALUE[FUNCP_ISA_INT_REG_SIZE] va,
                    out MEM_ADDRESS_RRR[64] pa);
    };
};
