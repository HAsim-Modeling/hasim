//
// Assertions
//

def ASSERTIONS.REGMGR.INVALID_NUM_DSTS         "FUNCP: Regstate: Instruction has more destinations than ISA definition claims!";
def ASSERTIONS.REGMGR.EMULATED_INSTR_HAS_DST   "FUNCP: Regstate: Emulated instructions may not have destination registers!";
def ASSERTIONS.REGMGR.EXPECTED_OLDEST_TOK      "FUNCP: Regstate: Expected oldest token!";
def ASSERTIONS.REGMGR.UNEXPECTED_REG_UPDATE    "FUNCP: Regstate: Got a register update from software at an unexpected time!";
def ASSERTIONS.REGMGR.UNEXPECTED_EMULATION_FINISHED "FUNCP: Regstate: Got an emmulation finished message from software at an unexpected time!";
def ASSERTIONS.REGMGR.DTRANSLATE_ON_MEMOP      "FUNCP: Regstate: Tried to do a DTranslate on a non-memory operation.";
def ASSERTIONS.REGMGR.ILLEGAL_INSTRUCTION      "FUNCP: Regstate: Illegal instruction!";
def ASSERTIONS.REGMGR.LOAD_ON_NONLOAD          "FUNCP: Regstate: Told to do loads on a non-load instruction!";
def ASSERTIONS.REGMGR.BAD_POISON_BIT           "FUNCP: Regstate: Timing model did not propagate token poison bit!";
def ASSERTIONS.REGMGR.STORE_ON_NONSTORE        "FUNCP: Regstate: Told to do stores for an instruction that is not a store!";


//
// Statistics
//

def STATS.REGMGR.GETRESULTS.EMULATED_INSTRS    "FUNCP: Emulated Instructions";


//
// Streams-based debugging
//

def STREAMID.REGMGR.GETDEP "funcp_getResults";

def STREAMS.REGMGR.GETDEP.REG_SRCS    "FUNCP GETDEP: read PR (%d, %d, %d) token %d\n";
def STREAMS.REGMGR.GETDEP.REG_DSTS    "FUNCP GETDEP: write PR (%d, %d) TOKEN (%d, %d)\n";


def STREAMID.REGMGR.GETRESULTS "funcp_getResults";

def STREAMS.REGMGR.GETRESULTS.SEND_TO_DP   "FUNCP GETRESULTS: send to dp TOKEN (%d, %d)\n";
def STREAMS.REGMGR.GETRESULTS.RECV_FROM_DP "FUNCP GETRESULTS: recv from dp TOKEN (%d, %d)\n";
def STREAMS.REGMGR.GETRESULTS.PRF_WRITE    "FUNCP GETRESULTS: prf write TOKEN (%d, %d) prf %d\n";
def STREAMS.REGMGR.GETRESULTS.EMUL_START   "FUNCP GETRESULTS: emulate start TOKEN (%d, %d)\n";
def STREAMS.REGMGR.GETRESULTS.EMUL_DONE    "FUNCP GETRESULTS: emulate done TOKEN (%d, %d)\n";


def STREAMID.REGMGR.REWIND "funcp_rewind";

def STREAMS.REGMGR.REWIND.RECV_REQ    "FUNCP REWIND: start TOKEN (%d, %d)\n";
def STREAMS.REGMGR.REWIND.SEND_RSP    "FUNCP REWIND: done TOKEN %d\n";
