#!/usr/bin/make -f --no-keep-going

# Must always invoke this makefile from its own directory
include ./Makefile.include

ROOT_DIR = @ROOT_DIR@
ROOT_WRAPPER_SYNTH_ID = mk_$(ROOT_DIR)_Wrapper

LOGFILE = $(APM_NAME).log

CXXS = $(ROOT_WRAPPER_SYNTH_ID).cxx schedule.cxx
HS = $(CXXS:%.cxx=%.h)
OS = $(CXXS:%.cxx=%.o)

ROOT_BA = $(ARCH_DIR)/$(ROOT_DIR)/$(ROOT_WRAPPER_SYNTH_ID).ba
ROOT_V = $(ARCH_DIR)/$(ROOT_DIR)/$(ROOT_WRAPPER_SYNTH_ID).v
ALL_BAS = @ALL_BAS@
ALL_VS = @ALL_VS@

################################################################
## Xilinx tool variables

## XUP board
PART = xc2vp30-ff896-7

#### xst
XST_FILE = $(APM_NAME).xst
XST_TARGET_FILE = $(APM_NAME).ngc
XST_SIDE_EFFECT_FILES = $(APM_NAME).srp $(APM_NAME)_vhdl.prj
XST_FLAGS = 

#### ngdbuild
UCF_FILE = $(APM_NAME).ucf
NGDBUILD_TARGET_FILE = $(APM_NAME).ngd
NGDBUILD_SIDE_EFFECT_FILES = $(NGDBUILD_TARGET_FILE) $(APM_NAME).bld netlist.lst
NGDBUILD_FLAGS = -dd _ngo -nt timestamp -p $(PART)

#### map
MAP_TARGET_FILE = $(APM_NAME)_map.ncd $(APM_NAME).pcf
MAP_SIDE_EFFECT_FILES = $(APM_NAME)_map.mrp $(APM_NAME)_map.ngm
MAP_FLAGS = -cm area -pr b -u -k 4 -c 100 -tx off -p $(PART)

#### par
PAR_TARGET_FILE = $(APM_NAME)_par.ncd
PAR_SIDE_EFFECT_FILES =  $(APM_NAME)_par.pad $(APM_NAME)_par.par $(APM_NAME)_par.unroutes $(APM_NAME)_par.xpi $(APM_NAME)_par_pad.csv $(APM_NAME)_par_pad.txt
PAR_FLAGS = -w -ol std -t 1 

#### bitgen
UT_FILE = $(APM_NAME).ut
BITGEN_TARGET_FILE = $(APM_NAME)_par.bit
BITGEN_SIDE_EFFECT_FILES = $(APM_NAME)_par.bgn $(APM_NAME)_par.drc
BITGEN_FLAGS = 

#### impact
DOWNLOAD_FILE = $(APM_NAME).download

.PHONY: all
all: bit

################################################################
## Verilog generation rules

.PHONY: vexe
vexe: $(APM_NAME).vexe
	@echo "#!/bin/sh" >$(APM_NAME)
	@echo "$(BUILD_DIR)/$(APM_NAME).vexe +bscvcd" >>$(APM_NAME)
	@chmod +x $(APM_NAME)
	@echo "Generated launch script \"$(APM_NAME)\"";


$(APM_NAME).vexe: $(ROOT_V)
	$(BSC) $(BSC_FLAGS) -verilog -e $(ROOT_WRAPPER_SYNTH_ID) -o $(APM_NAME).vexe $(ALL_VS) 2>&1 | tee $(LOGFILE)

$(ROOT_V):
	$(MAKE) -C $(ARCH_DIR)/$(ROOT_DIR) v

################################################################
## FPGA synthesis rules

$(APM_NAME).ngc: $(ROOT_V) $(XST_FILE) 
	$(XST) -ifn $(XST_FILE) 

$(APM_NAME).ngd: $(APM_NAME).ngc $(UCF_FILE)
	$(NGDBUILD) -uc $(UCF_FILE) $(APM_NAME).ngc $(APM_NAME).ngd

$(APM_NAME)_map.ncd $(APM_NAME).pcf: $(APM_NAME).ngd
	$(MAP) $(MAP_FLAGS) -o $(APM_NAME)_map.ncd $(APM_NAME).ngd $(APM_NAME).pcf

$(APM_NAME)_par.ncd: $(APM_NAME)_map.ncd  $(APM_NAME).pcf
	$(PAR) $(PAR_FLAGS) $(APM_NAME)_map.ncd $(APM_NAME)_par.ncd $(APM_NAME).pcf

$(APM_NAME)_par.bit: $(APM_NAME)_par.ncd $(UT_FILE)
	$(BITGEN) $(BITGEN_FLAGS) -f $(UT_FILE) $(APM_NAME)_par.ncd

.PHONY: bit
bit: $(APM_NAME)_par.bit $(DOWNLOAD_FILE)
	@echo "#!/bin/sh" >$(APM_NAME)
	@echo "impact -batch $(BUILD_DIR)/$(DOWNLOAD_FILE)" >>$(APM_NAME)
	@chmod +x $(APM_NAME)
	@echo "Generated launch script \"$(APM_NAME)\".";
	@mkdir -p $(MAPPED_DIR);
	@cp $(APM_NAME)_par.bit $(MAPPED_DIR)
	@cp $(DOWNLOAD_FILE) $(MAPPED_DIR)
	@echo "Copied files necessary for download to $(MAPPED_DIR).";


.PHONY: stats
stats: bit
	@echo "++++++++++++ Post-Synthesis ++++++++++++"
	@grep "Number of Slices" $(APM_NAME).srp
	@grep "Maximum Frequency" $(APM_NAME).srp
	@echo "++++++++++ Post-Place & Route ++++++++++"
	@grep "Number of SLICEs" $(APM_NAME)_par.par
	@grep -B 1 -A 3 "Max Delay" $(APM_NAME)_par.par
	@echo "++++++++++++++++++++++++++++++++++++++++"

################################################################
## Bluesim generation rules

.PHONY: exe
exe: $(APM_NAME).exe
	@echo "#!/bin/sh" >$(APM_NAME)
	@echo "$(BUILD_DIR)/$(APM_NAME).exe" >>$(APM_NAME)
	@chmod +x $(APM_NAME)
	@echo "Generated launch script \"$(APM_NAME)\"";


$(APM_NAME).exe: $(ROOT_BA)
	$(BSC) $(BSC_FLAGS) -sim -e $(ROOT_WRAPPER_SYNTH_ID) -o $(APM_NAME).exe $(ALL_BAS) 2>&1 | tee $(LOGFILE)

$(ROOT_BA):
	$(MAKE) -C $(ARCH_DIR)/$(ROOT_DIR) ba


################################################################
## Misc. rules

.PHONY: help
help:
	@echo "  [vexe] generate executable for Verilog simulation"
	@echo "  [exe]  generate executable for C simulation"
	@echo "  [bit] generate executable to run model on FPGA"
	@echo "  [help] display this message"
	@echo "  [clean] remove intermediate files"
	@echo "  [realclean] remove target files"

.PHONY: clean
clean: clean_root
	rm -f $(HS) $(OS) $(CXXS)
	rm -f $(XST_SIDE_EFFECT_FILES)
	rm -f $(NGDBUILD_SIDE_EFFECT_FILES)
	rm -f $(MAP_SIDE_EFFECT_FILES)
	rm -f $(PAR_SIDE_EFFECT_FILES)
	rm -f $(BITGEN_SIDE_EFFECT_FILES)
	rm -f *~

.PHONY: clean_root
clean_root:
	$(MAKE) -C $(ARCH_DIR)/$(ROOT_DIR) clean; 

.PHONY: realclean
realclean: clean realclean_root
	rm -f $(APM_NAME).exe $(APM_NAME).vexe dump.vcd
	rm -f $(XST_TARGET_FILE)
	rm -f $(NGDBUILD_TARGET_FILE)
	rm -f $(MAP_TARGET_FILE)
	rm -f $(PAR_TARGET_FILE)
	rm -f $(BITGEN_TARGET_FILE)

.PHONY: realclean_root
realclean_root:
	$(MAKE) -C $(ARCH_DIR)/$(ROOT_DIR) realclean; 

