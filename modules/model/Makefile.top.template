#!/usr/bin/make --no-keep-going -f

# Must always invoke this makefile from its own directory
include ./Makefile.include

ROOT_DIR = @ROOT_DIR@
ROOT_WRAPPER_SYNTH_ID = mk_$(ROOT_DIR)_Wrapper

CXXS = $(ROOT_WRAPPER_SYNTH_ID).cxx schedule.cxx
HS = $(CXXS:%.cxx=%.h)
OS = $(CXXS:%.cxx=%.o)

ROOT_BA = $(ARCH_DIR)/$(ROOT_DIR)/$(ROOT_WRAPPER_SYNTH_ID).ba
ROOT_V = $(ARCH_DIR)/$(ROOT_DIR)/$(ROOT_WRAPPER_SYNTH_ID).v

GIVEN_VS = @GIVEN_VS@
GIVEN_CS = @GIVEN_CS@
BDPI_CS = @BDPI_CS@

BDPI_BAS = @BDPI_BAS@

GEN_CXXS = $(TMP_BSC_DIR)/schedule.cxx @GEN_CXXS@
GEN_BAS = @GEN_BAS@
GEN_VS = @GEN_VS@

GEN_OS = $(GEN_CXXS:%.cxx=%.o)
GIVEN_OS = $(GIVEN_CS:%.cpp=%.o)
BDPI_OS = $(BDPI_CS:%.c=%.o)
WRAPPER_BIS = $(GEN_BAS:%.ba=%.bi)


ALL_BAS = $(GEN_BAS) $(BDPI_BAS)
ALL_VS = $(GEN_VS) $(GIVEN_VS)
ALL_CS = $(GEN_CXXS) $(GIVEN_CS)
ALL_OS = $(GEN_OS) $(BDPI_OS)

SWEXE = $(APM_NAME)_sw.exe

SUBDIR_BUILD_DONE = $(ARCH_DIR)/$(ROOT_DIR)/$(TMP_BSC_DIR)/build.done

## Model may define the target of "make all".  Provide a default if no target
## is specified.
ifneq ($(strip @MAKE_ALL_TARGET@),)
    MAKE_ALL_TARGET = @MAKE_ALL_TARGET@
else
    MAKE_ALL_TARGET = exe
endif

################################################################
## Xilinx tool variables

## XUP board
PART = @PART@

#### xst
XST_FILE = $(APM_NAME).xst
XST_FLAGS = 

#### ngdbuild
UCF_FILE = $(APM_NAME).ucf
NGDBUILD_FLAGS = -dd _ngo -nt timestamp -p $(PART)

#### map
MAP_TARGET_FILE = $(APM_NAME)_map.ncd $(APM_NAME).pcf
MAP_FLAGS = -cm area -pr b -u -k 4 -c 100 -tx off -p $(PART)

#### par
PAR_FLAGS = -w -ol std -t 1 

#### bitgen
UT_FILE = $(APM_NAME).ut
BITGEN_FLAGS = 

#### impact
DOWNLOAD_FILE = $(APM_NAME).download

.c.o:
	$(CC) -c -DAPM_NAME=\"$(APM_NAME)\" -o $@ $<

.cpp.o:
	$(CPP) -c -DAPM_NAME=\"$(APM_NAME)\" -o $@ $<

.PHONY: all
all: $(MAKE_ALL_TARGET)

################################################################
## FPGA synthesis rules

.PHONY: bit
bit: $(APM_NAME)_par.bit $(DOWNLOAD_FILE) $(SWEXE)
	@echo "#!/bin/sh" >$(APM_NAME)
	@echo "impact -batch $(BUILD_DIR)/$(DOWNLOAD_FILE)" >>$(APM_NAME)
	@chmod +x $(APM_NAME)
	@echo "Generated launch script \"$(APM_NAME)\".";
	@echo ""
	@echo "++++++++++++ Post-Synthesis ++++++++++++"
	@grep "Number of Slices" $(XILINX_APM_NAME).srp
	@grep "Maximum Frequency" $(XILINX_APM_NAME).srp
	@echo "++++++++++ Post-Place & Route ++++++++++"
	@grep "Number of SLICEs" $(XILINX_APM_NAME)_par.par
	@grep -B 1 -A 3 "Max Delay" $(XILINX_APM_NAME)_par.par
	@echo "++++++++++++++++++++++++++++++++++++++++"

$(APM_NAME)_par.bit: $(XILINX_APM_NAME)_par.ncd $(UT_FILE)
	$(BITGEN) $(BITGEN_FLAGS) -f $(UT_FILE) $<
	mv xilinx_device_details.xml $(TMP_XILINX_DIR)
	mv $(TMP_XILINX_DIR)/$@ .

$(XILINX_APM_NAME)_par.ncd: $(XILINX_APM_NAME)_map.ncd $(XILINX_APM_NAME).pcf
	$(PAR) $(PAR_FLAGS) $< $@ $(XILINX_APM_NAME).pcf

$(XILINX_APM_NAME)_map.ncd $(XILINX_APM_NAME).pcf: $(XILINX_APM_NAME).ngd
	$(MAP) $(MAP_FLAGS) -o $(XILINX_APM_NAME)_map.ncd $^ $(XILINX_APM_NAME).pcf

$(XILINX_APM_NAME).ngd: $(UCF_FILE) $(XILINX_APM_NAME).ngc 
	$(NGDBUILD) -uc $^ $@
	mv netlist.lst $(TMP_XILINX_DIR)

$(XILINX_APM_NAME).ngc: $(SUBDIR_BUILD_DONE) $(XST_FILE)
	$(XST) -ifn $(XST_FILE)
	mv $(APM_NAME).srp $(TMP_XILINX_DIR)
	mv $(@F) $(TMP_XILINX_DIR)

################################################################
## Verilog generation rules

.PHONY: vexe
vexe: $(APM_NAME).vexe $(SWEXE)
	@echo "#!/bin/sh" >$(APM_NAME)
	@echo "$(BUILD_DIR)/$(APM_NAME).vexe +bscvcd" >>$(APM_NAME)
	@chmod +x $(APM_NAME)
	@ln -fs $(APM_NAME).vexe simv
	@echo "Generated launch script \"$(APM_NAME)\"";

$(APM_NAME).vexe: $(SUBDIR_BUILD_DONE) $(BDPI_OS)
	@$(TRAP_ERRORS)
	@ln -f -s $(ARCH_DIR)/$(ROOT_DIR)/vpi_* .
	@$(BSC) $(BSC_FLAGS) $(VSIM_LINK_FLAGS) -verilog -e $(ROOT_WRAPPER_SYNTH_ID) -o $@ $(ALL_VS) $(BDPI_OS) $(BDPI_BAS)
	@rm -f vpi_*
	@if [ -f "directc.sft" ] ; then mv -f directc.sft $(TMP_BSC_DIR) ; fi

################################################################
## Bluesim generation rules

.PHONY: exe
exe: $(APM_NAME)_hw.exe $(SWEXE)
	@echo "#!/bin/sh" >$(APM_NAME)
	@echo "$(BUILD_DIR)/$(APM_NAME)_hw.exe" >>$(APM_NAME)
	@chmod +x $(APM_NAME)
	@ln -fs $(APM_NAME)_hw.exe simv
	@echo "Generated launch script \"$(APM_NAME)\"";

$(APM_NAME)_hw.exe: $(ALL_OS)
	@ $(CPP) $(CPP_FLAGS) $(LDFLAGS) -DTOP=$(ROOT_WRAPPER_SYNTH_ID) -o $(APM_NAME)_hw.exe $(ALL_OS) $(BLUESIM_LINK_LIBS)

$(GEN_CXXS): $(TMP_BSC_DIR)/$(APM_NAME).done

$(TMP_BSC_DIR)/$(APM_NAME).done: $(SUBDIR_BUILD_DONE)
	@echo "Generating C files" ;\
	 $(BSC) $(BSC_FLAGS) $(LDFLAGS) -KILLsimBlocksToC -sim -e $(ROOT_WRAPPER_SYNTH_ID) -simdir $(TMP_BSC_DIR) $(ALL_BAS) \;
	 touch $@

$(TMP_BSC_DIR)/%.o: $(TMP_BSC_DIR)/%.cxx $(TMP_BSC_DIR)/$(APM_NAME).done
	@echo "Compiling $<" ;\
	 $(CPP) $(CPP_FLAGS) -c -o $@ $<


################################################################
## Software side

$(SWEXE): $(GIVEN_OS)
ifneq ($(strip $(GIVEN_OS)),)
	@ $(CPP) -o $@ $(GIVEN_OS)
	@ln -fs $@ simx
endif


## Dependencies ensure correct build order of generated .o files

$(TMP_BSC_DIR)/schedule.o: $(TMP_BSC_DIR)/$(ROOT_WRAPPER_SYNTH_ID).o

@GEN_O_DEPS@


################################################################
##

## Build subdirectory.

## build.done is rebuilt by the recursive make whenever something in the
## subdirectory build changes.  It serves as a semaphore for activity
## without having to know the full dependence chain.
$(SUBDIR_BUILD_DONE): make_subdir

##
## This dependence forces make to reload itself after make_subdir has run.
## Without this line make will never discover if build.done is rebuilt
## by the recursive build.  Avoid setting this dependence for build targets
## like help and clean, since they would force a build in subdirectories.
##
ifeq ($(findstring $(MAKECMDGOALS),help clean clean_root),)
Makefile:: make_subdir
endif

.PHONY: make_subdir
make_subdir:
	@$(TRAP_ERRORS)
	$(MAKE) -C $(ARCH_DIR)/$(ROOT_DIR)

################################################################
## Misc. rules

.PHONY: help
help:
	@echo "  [vexe] generate executable for Verilog simulation"
	@echo "  [exe]  generate executable for C simulation"
	@echo "  [bit] generate executable to run model on FPGA"
	@echo "  [help] display this message"
	@echo "  [clean] remove intermediate and target files"

.PHONY: clean
clean: clean_root
	@$(MAKE) -C $(ARCH_DIR)/$(ROOT_DIR) clean; 

.PHONY: clean_root
clean_root:
	@rm -f $(TMP_XILINX_DIR)/*.*
	@rm -f $(TMP_BSC_DIR)/*.*
	@rm -f $(APM_NAME).exe $(APM_NAME).vexe dump.vcd $(SWEXE)
	@rm -f $(APM_NAME)_par.bit
	@rm -f $(APM_NAME)
	@rm -f *~
