#!/usr/bin/perl -w
#
# This script reads in a list of BSV files (provided by another tool) and creates
# a build directory, including appropiate sym links and Makefile.
#

use strict "vars";
use warnings;
no  warnings("once");
use File::Spec;
use File::Spec::Unix;

#--------------------------------------------------------------------------
# Command line processing
#--------------------------------------------------------------------------


sub ERROR
{
  my ( $msg ) = @_;
  print "\n ERROR: $msg \n\n";
  exit;
}


sub makeMakefile
{

  my $mfstart = <<'EOF';
BSC?=bsc

## Fill this in after linker script
TopLevel =

HASimDir=../../src/asim-hasim


FLAGS= -u -v \
       -steps 1000000 \
        +RTS -K1000M -RTS \
	-keep-fires \
	-aggressive-conditions \
	-no-opt-bool \
	-no-opt-ATS \
	-dschedule  

EOF

  my $bss = "BSs=";
  my $bsvs = "BSVs=";
  
  foreach my $modloc (@ARGV)
  {
    my ($volume, $directories, $mod) = File::Spec->splitpath( $modloc);
    if ($mod =~ m/.bs$/)
    {
      $bss = ($bss . " " . $mod);
    }
    elsif ($mod =~ m/.bsv$/)
    {
      $bsvs = ($bsvs . " " . $mod);
    }
  }

  my $mfend = <<'EOF';


BIs=$(BSs:.bs=.bi) $(BSVs:.bsv=.bi)

## Multiple Verilog simulator support.
VERILOGLIBS = -y $(BLUESPECDIR)/Verilog -y . 
VERIMAIN = $(BLUESPECDIR)/Verilog/main.v 

## Default simulator is iverilog

## Verilog compile command line ending is file to generate
VCOMP    = iverilog -Wall $(VERILOGLIBS) 
## Verilog compile command line to specific model called by main
VCOMPTop = -DTOP=
## Prefix to run result of Verilog comiple
VSCR     = ./

ifdef vcsi
    VCOMP    = vcsi  +v2k +libext+.v $(VERILOGLIBS) $(VERIMAIN) -o 
    VCOMPTop = +define+TOP=
endif

ifdef vcs
    VCOMP    = vcs  +v2k +libext+.v $(VERILOGLIBS) +define+TOP=testBranch_V
    VCOMPTop = +define+TOP=
endif

ifdef ncverilog
    VCOMP = ncverilog -c  +access+r  +libext+.v $(VERILOGLIBS) $(VERIMAIN) +name+
    VCOMPTop = +define+TOP=
    VSCR   = ncverilog -R +name+
endif

ifdef ncsim
    VCOMP = ncsim -c  +access+r  +libext+.v $(VERILOGLIBS) $(VERIMAIN) +name+
    VCOMPTop = +define+TOP=
    VSCR   = ncsim -R +name+
endif

ifdef cver
     VCOMP = cvsr +libext+.v  $(VERILOGLIBS) -o 
     VCOMPTop = +define+TOP=
endif
.SUFFIXES: .bs .bsv .bi .v

.bs.bi:
	 $(BSC) $(FLAGS) $<
.bsv.bi:
	 $(BSC) $(FLAGS) $<

all: $(BIS)
	 $(BSC) -u -verilog $(FLAGS) TopLevel.bsv



# compile and elaborate with Verilog simulator 
mk%_v: mk%.v mk%.v 
	$(VCOMP)$@ $(VCOMPTop)mk$* 

# produce a VCD file from Verilog simulator
mk%.vcd: mk%_v
	$(VSCR)$< +bscvcd | tee logfile

.PHONY: clean
clean:
	rm -f *.bi *.bo mk*.c mk*.h mk*.o mk*.v test* *.vcd *~ *.fsdb *.log a.out
	rm -rf csrc INCA_libs simv.daidir 
EOF

  return ($mfstart . $bss . "\n\n" . $bsvs . $mfend);

}

sub main()
{

  #Something might need to be done here with relative paths
  
  
  # Create simlinks
  
  foreach my $modloc (@ARGV)
  {
    my ($volume, $directories, $mod) = File::Spec->splitpath( $modloc );
  
    `ln -s $modloc`;
    if ($? != 0)
    {
      ERROR("Error creating symlink from $modloc to $mod");
    }
  }
  # Create Makefile
  
  my $makefile = makeMakefile();
  
  open(MFILE, ">Makefile") or ERROR("Could not create Makefile");
  print MFILE $makefile;
  close(MFILE);
  
}

main();
