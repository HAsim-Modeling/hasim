:
eval 'exec perl -w "$0" ${1+"$@"}'
    if 0;

# *****************************************************************
# *                                                               *
# *   Copyright (c) (Fill in here)                                *
# *                                                               *
# *****************************************************************

#
# Author:  Martha Mercaldi
#

use File::Basename;
use Getopt::Long;

use Asim;
use AsimShell;

use HAsim;

use warnings;
use strict;



############################################################
# command line handling

my $status;

my $help = 0;
my $debug = 0;

# only one of the following command flags should be set
my $configure = 0;
my $nuke = 0;
my $setup = 0;
my $build = 0;
my $run = 0;

# command options
my $buildopt = "all";

my $private = 1;
my $public = 1;
my $relative = 0;

$status = GetOptions( "private!"   => \$private,
                      "public!"    => \$public,
                      "relative!"  => \$relative,
                      "debug"      => \$debug,
                      "configure"  => \$configure,
                      "nuke"       => \$nuke,
                      "setup"      => \$setup,
                      "build"      => \$build,
                      "run"        => \$run,
                      "buildopt=s" => \$buildopt,
                      "help"       => \$help
		      );

my $prog = basename($0);

if (!$status) {
    HAsim::Util::WARN_AND_DIE("Illegal argument, try '$prog --help'");
}

if ($help) {
    system "perldoc $0";
    exit 0;
}


my $num_commands = $configure + $nuke + $build + $setup + $run;
if ($num_commands != 1) {
    print STDERR "$prog: Must supply exactly one command:\n";
    print STDERR "\t-configure\n";
    print STDERR "\t-nuke\n";
    print STDERR "\t-build\n";
    print STDERR "\t-setup\n";
    print STDERR "\t-run\n";
    exit 0;
}


############################################################
# main body of script

Asim::init()
    || die("Unable to initialize Asim::\n");

foreach my $apmfile (@ARGV) {

    print "Opening... $apmfile\n" if $debug;

    if ($configure) {
	print "Configuring build tree for $apmfile . . . ";
	configure_build_tree($apmfile);
    } elsif ($nuke) {
	print "Nuking build tree. . . ";
	delete_build_tree($apmfile);
    } elsif ($setup) {
	WARN_AND_DIE("setup command not yet implemented");
    } elsif ($build) {
#	WARN_AND_DIE("build command not yet implemented");
	print "Compiling build tree. . . ";
	build_build_tree($apmfile);
    } elsif ($run) {
	print "Running model. . . ";
	run_model($apmfile);
#	WARN_AND_DIE("run command not yet implemented");
    }

   print "done\n";
}

exit 1;

############################################################
# run_model
sub run_model {
    my $modelfile = shift;
    my $model = Asim::Model->new($modelfile);
    my $build_dir = $model->build_dir();
    
    my $apm = get_model_name($model);
    my $exe = HAsim::Util::path_append($build_dir,$apm);
    
    $status = system("$exe");

    return 1;
}

############################################################
# build_build_tree
sub build_build_tree {
    my $modelfile = shift;
    my $model = Asim::Model->new($modelfile);
    my $build_dir = $model->build_dir();

    ## NOTE: make target should come from argument to hasim-configure
    $status = system("make -C $build_dir $buildopt");

    return 1;
}

############################################################
# delete_build_tree
sub delete_build_tree {
    my $modelfile = shift;
    my $model = Asim::Model->new($modelfile);
    my $build_dir = $model->build_dir();
    my $above_build_dir = $build_dir;
    $above_build_dir =~ s/\/pm$//g; # strip off pm directory to make parent first
    $status = system("rm -fr $above_build_dir");
    return 1;
}

############################################################
# configure_build_tree: Open a model produce build tree,
#                       populated with Makefiles, for it 
sub configure_build_tree {
    my $modelfile = shift;
    my $model = Asim::Model->new($modelfile);

    # (1) make directories
    make_dirs($model);

    # (2) make symlinks
    make_symlinks($model);

    # (3) generate makefiles from templates
    generate_makefile_include($model);
    generate_makefile_top($model);
    generate_makefile_sub($model);

    # (4) generate files needex by Xilinx tools
    HAsim::Xilinx::generate_files($model);
    
    return 1;
}

############################################################
# generate_makefile_include: Collect template replacement 
#                            values for model, and generate
#                            $(APM)/pm/Makefile.include
sub generate_makefile_include {
    my $model = shift;

    my $replacements_r = HAsim::Util::empty_hash_ref();

    # @BUILD_DIR@
    HAsim::Util::hash_set($replacements_r,'@BUILD_DIR@',$model->build_dir());

    # @APM_NAME@
    my $apm = HAsim::Build::get_model_name($model);
    HAsim::Util::hash_set($replacements_r,'@APM_NAME@',$apm);

    # @TMP_XILINX_DIR@
    HAsim::Util::hash_set($replacements_r,'@TMP_XILINX_DIR@',$HAsim::Xilinx::tmp_xilinx_dir);

    # @TMP_BSC_DIR@
    HAsim::Util::hash_set($replacements_r,'@TMP_BSC_DIR@',$HAsim::Bluespec::tmp_bsc_dir);

    # @CONNECTION_SCRIPT@
#    hash_set($replacements_r,'@CONNECTION_SCRIPT@',Asim::resolve("tools/scripts/hasim-connect"));

    # @APM_FILE@
    HAsim::Util::hash_set($replacements_r,'@APM_FILE@',$model->filename());

    # gather other info recursively
    __generate_makefile_include($model->modelroot(),"arch",$replacements_r);

    my $template = HAsim::Build::get_makefile_include_template($model);
    my $makefile = HAsim::Util::path_append($model->build_dir(),"Makefile.include");
    HAsim::Templates::do_replacements($template,$makefile,$replacements_r);
}

############################################################
# __generate_makefile_include: Recursively collect replacements
#                              for Makefile.include
sub __generate_makefile_include {
    my $module = shift;
    my $parent_dir = shift;
    my $replacements_r = shift;

    my $my_dir = HAsim::Build::get_module_build_dir($module,$parent_dir);
    if (HAsim::Build::is_synthesis_boundary($module)) {
	# @ALL_DIRS@
	HAsim::Util::hash_append($replacements_r,":",'@ALL_DIRS@',HAsim::Util::path_append("\$(BUILD_DIR)",$my_dir));
    }

    # recurse
    HAsim::Build::check_submodules_defined($module);
    foreach my $child ($module->submodules()) {
	__generate_makefile_include($child,$my_dir,$replacements_r);
    }

}

############################################################
# generate_makefile_top: Collect template replacement values
#                        for model, and generate 
#                        $(APM)/pm/Makefile
sub generate_makefile_top {
    my $model = shift;
    
    my $replacements_r = HAsim::Util::empty_hash_ref();
    
    #@ROOT_DIR@
    my $root = $model->modelroot();
    if (HAsim::Build::is_synthesis_boundary($root)) {
	HAsim::Util::hash_set($replacements_r,'@ROOT_DIR@',$root->provides());
    } else {
	HAsim::Util::WARN_AND_DIE("Root module must be a synthesis boundary");
    }

    # @PART@
    HAsim::Util::hash_set($replacements_r,'@PART@',$HAsim::Xilinx::part_num);

    # gather other info recursively
    __generate_makefile_top($root,"arch",$replacements_r);

    my $template = HAsim::Build::get_makefile_top_template($model);
    my $makefile = HAsim::Util::path_append($model->build_dir(),"Makefile");
    HAsim::Templates::do_replacements($template,$makefile,$replacements_r);
}

############################################################
# __generate_makefile_top: Recursively collect replacements
#                          for Makefile.top
sub __generate_makefile_top {
    my $module = shift;
    my $parent_dir = shift;
    my $replacements_r = shift;

    my $my_dir = HAsim::Build::get_module_build_dir($module,$parent_dir);
    if (HAsim::Build::is_synthesis_boundary($module)) {
	# @ALL_VS@
	my $fileroot = HAsim::Build::get_wrapper($module);
	my $v_file = "$fileroot.v";
	HAsim::Util::hash_append($replacements_r," ",'@ALL_VS@',HAsim::Util::path_append("\$(BUILD_DIR)",$my_dir,$v_file));
	# @ALL_BAS@
	my $ba_file = "$fileroot.ba";
	HAsim::Util::hash_append($replacements_r," ",'@ALL_BAS@',HAsim::Util::path_append("\$(BUILD_DIR)",$my_dir,$ba_file));
    }

    # recurse
    HAsim::Build::check_submodules_defined($module);
    foreach my $child ($module->submodules()) {
	__generate_makefile_top($child,$my_dir,$replacements_r);
    }

}


############################################################
# generate_makefile_sub: Collect template replacement values
#                        for model, and generate a Makefile
#                        for each directory in the build tree
#                        (one per synthesis boundary) 
sub generate_makefile_sub {
    my $model = shift;
    
    my $replacements_r = HAsim::Util::empty_hash_ref();
    __generate_makefile_sub($model,$model->modelroot(),"arch",$replacements_r);
}

############################################################
# __generate_makefile_sub: Recursively collect template 
#                          replacement values and generate
#                          Makefiles, one per directory
#                          in the build tree
sub __generate_makefile_sub {
    my $model = shift;
    my $module = shift;
    my $parent_dir = shift;
    my $replacements_r = shift;

    my $current_replacements_r = $replacements_r;
    my $my_dir = $parent_dir;

    if (HAsim::Build::is_synthesis_boundary($module)) {

	# OVERRIDE non-synth-boundary settings
	# 1. instantiate new hash for synthesis boundary
	$current_replacements_r = HAsim::Util::empty_hash_ref();
	# 2. update path
	$my_dir = HAsim::Util::path_append($parent_dir,$module->provides());

	## @DIR@
	HAsim::Util::hash_set($current_replacements_r,'@DIR@',$module->provides());
	
	## @PARENT_PATH@
	HAsim::Util::hash_set($current_replacements_r,'@PARENT_PATH@',$parent_dir);
	
	## @DOTS_TO_MAKEFILE_INCL@
	my $dots_path = $my_dir;
	$dots_path =~ s/([^\/])+/../g;
	HAsim::Util::hash_set($current_replacements_r,'@DOTS_TO_MAKEFILE_INCL@',$dots_path);

    }

    ## @SUBDIRS@ & @SUBDIR_BAS@
    HAsim::Build::check_submodules_defined($module);
    foreach my $child ($module->submodules()) {
	
	if (HAsim::Build::is_synthesis_boundary($child)) {
	    my $subdir = $child->provides();
	    HAsim::Util::hash_append($current_replacements_r," ",'@SUBDIRS@',$subdir);
	    my $child_ba = HAsim::Util::path_append($subdir, HAsim::Build::get_wrapper($child) . ".ba");
	    HAsim::Util::hash_append($current_replacements_r," ",'@SUBDIR_BAS@',$child_ba);
	}
    }

    ## FOR BOTH SYNTH & NON_SYNTH
    ## @BSVS@ & @SRCS@
    my @l = ();
    if ($private) { push(@l, $module->private()); }
    if ($public) { push(@l, $module->public()); }
    foreach my $f (@l) {
	if ($f =~ /.bsv/) {
	    HAsim::Util::hash_append($current_replacements_r, " ", '@BSVS@', $f);
	} else {
	    HAsim::Util::hash_append($current_replacements_r, " ", '@SRCS@', $f);
	}
    }

    #recurse
    HAsim::Build::check_submodules_defined($module);
    foreach my $child ($module->submodules()) {
	__generate_makefile_sub($model,$child,$my_dir,$current_replacements_r);
    }

    # on the way up, possibly generate makefile
    if (HAsim::Build::is_synthesis_boundary($module)) {
	my $template = HAsim::Build::get_makefile_sub_template($model,$module);
	my $makefile = HAsim::Util::path_append($model->build_dir(),$my_dir,"Makefile");
	HAsim::Templates::do_replacements($template,$makefile,$current_replacements_r);
    }
}

############################################################
# make_symlinks: Generate symlinks in build tree to source
#                files and to model apm file (for connect script)
sub make_symlinks {
    my $model = shift;

    my $root = $model->modelroot();
    my $build_dir = $model->build_dir();
    my $arch_dir = HAsim::Util::path_append($build_dir,"arch");
    __make_symlinks($root,$arch_dir);
    
    return 1;
}

############################################################
# __make_symlinks: Recursively generate symlinks in build 
#                  tree
sub __make_symlinks {
    my $module = shift;
    my $parent_dir = shift;

    # identify correct directory in build tree
    my $my_dir = HAsim::Build::get_module_build_dir($module,$parent_dir);

    # for each src file, generate symlink in $my_dir
    my $base_dir = $module->base_dir();
    my @l = ();
    if ($private) {	push(@l, $module->private());    }
    if ($public) {	push(@l, $module->public());    }
    foreach my $f (@l) {
	my $src = Asim::resolve(HAsim::Util::path_append($base_dir,$f));
	my $tgt = HAsim::Util::path_append($my_dir,$f);
	$status = system("ln -f -s $src $tgt");
    }

    # recurse
    HAsim::Build::check_submodules_defined($module);
    foreach my $child ($module->submodules()) {
	__make_symlinks($child,$my_dir);
    }

    return 1;
}

############################################################
# make_dirs: Make directories for build tree
sub make_dirs {
    my $model = shift;
    my $root = $model->modelroot();

    my $dir = HAsim::Util::path_append($model->build_dir(),$HAsim::Xilinx::tmp_xilinx_dir);
    $status = system("mkdir -p " . $dir);

    $dir = HAsim::Util::path_append($model->build_dir(),$HAsim::Bluespec::tmp_bsc_dir);
    $status = system("mkdir -p " . $dir);

    __make_dirs($root,HAsim::Util::path_append($model->build_dir(),"arch"));
    return 1;
}

############################################################
# __make_dirs: Recursively make directories for build tree
sub __make_dirs {
    my $module = shift;
    my $parent_dir = shift;

    my $my_dir = HAsim::Build::get_module_build_dir($module,$parent_dir);
    if (HAsim::Build::is_synthesis_boundary($module)) {
	$status = system("mkdir -p $my_dir");
    } 
    
    ## recurse
    HAsim::Build::check_submodules_defined($module);
    foreach my $child ($module->submodules()) {
	__make_dirs($child,$my_dir);
    }
    
    return 1;
}
